{"version":3,"sources":["src/logic/elements.js","src/logic/speech.js","src/main.js"],"names":["formInputs","Array","from","document","querySelectorAll","text","getElementById","textWrapper","textContainer","warningWrapper","warningText","settingsPannel","settingsButton","settingsIcon","settingsForm","xIcon","checkIcon","getStyle","element","styleProp","style","getComputedStyle","getNumericalValue","regex","parseInt","match","addEventListener","settingsDisplay","display","opacity","forEach","input","name","readValue","onChange","e","v","target","value","color","i","body","backgroundColor","documentElement","Math","round","height","lineHeight","lineCount","nextLineHeight","nextHeight","fontSize","SpeechRecognition","window","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","recognition","autorestart","error","continuous","interimResults","onresult","resultArray","results","string","map","r","transcript","join","textContent","scroll","scrollHeight","onend","start","setErrorState","onerror","console","warn"],"mappings":"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","file":"main.1e43358e.js","sourceRoot":"..","sourcesContent":["// START - ELEMENTS - START\nconst formInputs = Array.from(document.querySelectorAll('.input'))\nexport const text = document.getElementById('text')\nexport const textWrapper = document.getElementById('textWrapper')\nexport const textContainer = document.getElementById('textContainer')\n\nexport const warningWrapper = document.getElementById('warningWrapper')\nexport const warningText = document.getElementById('warningText')\n\nexport const settingsPannel = document.getElementById('settingsPannel')\nexport const settingsButton = document.getElementById('settingsButton')\nexport const settingsIcon = document.getElementById('settingsIcon')\nexport const settingsForm = document.getElementById('settingsForm')\n\nexport const xIcon = document.getElementById('xIcon')\nexport const checkIcon = document.getElementById('checkIcon')\n// END - ELEMENTS - END\n\n// START - UTILS - START\nconst getStyle = (element, styleProp) =>\n\telement.style[styleProp] || getComputedStyle(element)[styleProp]\nconst getNumericalValue = (text) => {\n\tconst regex = /\\d+/g\n\treturn parseInt(text.match(regex)[0])\n}\n// END - UTILS - END\n\nsettingsButton.addEventListener('click', () => {\n\tconst settingsDisplay = getStyle(settingsPannel, 'display')\n\n\tif (settingsDisplay === 'none') {\n\t\tsettingsPannel.style.display = 'block'\n\t\tsettingsIcon.style.opacity = 1\n\t} else {\n\t\tsettingsPannel.style.display = 'none'\n\t\tsettingsIcon.style.opacity = 0.7\n\t}\n})\n\nformInputs.forEach((input) => {\n\tconst { name } = input\n\tlet readValue\n\tlet onChange\n\tswitch (name) {\n\t\tcase 'textColor':\n\t\t\treadValue = getStyle(text, 'color')\n\n\t\t\tonChange = (e) => {\n\t\t\t\tconst v = e.target.value\n\t\t\t\ttext.style.color = v\n\t\t\t\tformInputs.forEach((i) => (i.style.color = v))\n\t\t\t\tsettingsPannel.style.color = v\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'backgroundColor':\n\t\t\treadValue = getStyle(document.body, 'background-color')\n\n\t\t\tonChange = (e) => {\n\t\t\t\tconst v = e.target.value\n\t\t\t\tdocument.body.style.backgroundColor = v\n\t\t\t\tdocument.documentElement.style.backgroundColor = v\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'fontSize':\n\t\t\treadValue = getNumericalValue(getStyle(text, 'font-size'))\n\n\t\t\tonChange = (e) => {\n\t\t\t\tconst v = Math.round(e.target.value)\n\n\t\t\t\tconst height = getNumericalValue(getStyle(textWrapper, 'height'))\n\t\t\t\tconst lineHeight = getNumericalValue(getStyle(text, 'line-height'))\n\t\t\t\tconst lineCount = height / lineHeight\n\n\t\t\t\tconst nextLineHeight = Math.round(v + 8)\n\t\t\t\tconst nextHeight = Math.round(nextLineHeight * lineCount)\n\n\t\t\t\tinput.value = v\n\t\t\t\ttext.style.fontSize = `${v}px`\n\t\t\t\ttext.style.lineHeight = `${nextLineHeight}px`\n\t\t\t\ttextWrapper.style.height = `${nextHeight}px`\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'lineCount': {\n\t\t\tconst height = getNumericalValue(getStyle(textWrapper, 'height'))\n\t\t\tconst lineHeight = getNumericalValue(getStyle(text, 'line-height'))\n\t\t\treadValue = height / lineHeight\n\n\t\t\tonChange = (e) => {\n\t\t\t\tconst v = Math.round(e.target.value)\n\t\t\t\tconst fontSize = getNumericalValue(getStyle(text, 'font-size'))\n\t\t\t\tconst lineHeight = Math.round(fontSize + 8)\n\t\t\t\tconst height = Math.round(lineHeight * v)\n\t\t\t\ttextWrapper.style.height = `${height}px`\n\t\t\t\ttext.style.lineHeight = `${lineHeight}px`\n\t\t\t\tinput.value = v\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tdefault:\n\t\t\treturn\n\t}\n\tinput.value = readValue\n\tinput.addEventListener('change', onChange)\n})\n","import { warningText } from './elements'\nimport {\n\ttext,\n\ttextWrapper,\n\ttextContainer,\n\txIcon,\n\tcheckIcon,\n\twarningWrapper,\n\tsettingsButton,\n} from '/src/logic/elements'\n\nconst SpeechRecognition =\n\twindow.SpeechRecognition ||\n\twindow.webkitSpeechRecognition ||\n\twindow.mozSpeechRecognition ||\n\twindow.msSpeechRecognition ||\n\twindow.oSpeechRecognition\n\nexport let recognition\nlet autorestart = true\n\nif (typeof SpeechRecognition === 'undefined') {\n\trecognition = {\n\t\terror:\n\t\t\t'This browser does not support speech recognition. Please open this app in Google Chrome.',\n\t}\n} else {\n\trecognition = new SpeechRecognition()\n}\n\n// Recognition config\nrecognition.continuous = true\n\nrecognition.interimResults = true\n\nrecognition.onresult = (e) => {\n\tconst resultArray = Array.from(e.results)\n\tconst string = resultArray.map((r) => r[0].transcript).join('')\n\ttext.textContent = string\n\ttextWrapper.scroll(0, textWrapper.scrollHeight)\n}\n\nrecognition.onend = () => {\n\t// Speech Recognition ends every few seconds of inactivity\n\t// but we want to keep it alive while the user is on the page\n\tif (autorestart) {\n\t\trecognition.start()\n\t}\n}\n\nconst setErrorState = () => {\n\tautorestart = false\n\txIcon.style.display = 'block'\n\tcheckIcon.style.display = 'none'\n\ttextContainer.style.display = 'none'\n\tsettingsButton.style.display = 'none'\n\twarningWrapper.style.display = 'block'\n}\nrecognition.onerror = (e) => {\n\tswitch (e.error) {\n\t\tcase 'no-speech':\n\t\t\tbreak\n\t\tcase 'not-allowed':\n\t\tcase 'service-not-allowed':\n\t\t\tsetErrorState()\n\t\t\twarningText.textContent = 'Stream CC needs permission to access your microphone. Please enable microphone access and reload this page.'\n\t\t\tbreak\n\t\tdefault:\n\t\t\tsetErrorState()\n\t\t\twarningText.textContent = e.error\n\t}\n}\n","import { recognition } from '/src/logic/speech'\nimport { warningText } from '/src/logic/elements'\n\nif (recognition.error) {\n\tconsole.warn(recognition.error)\n\twarningText.textContent = recognition.error\n} else {\n\trecognition.start()\n}\n"]}