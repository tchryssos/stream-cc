{"version":3,"sources":["src/logic/elements.js","src/logic/speech.js","src/main.js"],"names":["text","document","getElementById","textWrapper","pageSizeWarningText","getStyle","element","styleProp","style","getComputedStyle","settingsPannel","settingsButton","settingsIcon","settingsForm","formInputs","Array","from","querySelectorAll","console","log","addEventListener","settingsDisplay","display","opacity","forEach","input","name","readValue","body","regex","height","match","lineHeight","value","SpeechRecognition","window","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","recognition","error","continuous","interimResults","onresult","e","resultArray","results","string","map","r","transcript","join","textContent","scroll","scrollHeight","onend","start","warn"],"mappings":"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","file":"main.1e43358e.js","sourceRoot":"..","sourcesContent":["export const text = document.getElementById('text')\nexport const textWrapper = document.getElementById('textWrapper')\nexport const pageSizeWarningText = document.getElementById(\n\t'pageSizeWarningText',\n)\n\nconst getStyle = (element, styleProp) => element.style[styleProp] || getComputedStyle(element)[styleProp]\n\nexport const settingsPannel = document.getElementById('settingsPannel')\nexport const settingsButton = document.getElementById('settingsButton')\nexport const settingsIcon = document.getElementById('settingsIcon')\nexport const settingsForm = document.getElementById('settingsForm')\nconst formInputs = Array.from(document.querySelectorAll('.input'))\nconsole.log(formInputs)\n\nsettingsButton.addEventListener('click', () => {\n\tconst settingsDisplay = getStyle(settingsPannel, 'display')\n\n\tif (settingsDisplay === 'none') {\n\t\tsettingsPannel.style.display = 'block'\n\t\tsettingsIcon.style.opacity = 1\n\t} else {\n\t\tsettingsPannel.style.display = 'none'\n\t\tsettingsIcon.style.opacity = 0.7\n\t}\n})\n\nformInputs.forEach(\n\t(input) => {\n\t\tconst { name } = input\n\t\tlet readValue\n\t\tswitch (name) {\n\t\t\tcase 'textColor':\n\t\t\t\treadValue = getStyle(text, 'color')\n\t\t\t\tbreak\n\t\t\tcase 'backgroundColor':\n\t\t\t\treadValue = getStyle(document.body, 'background-color')\n\t\t\t\tbreak\n\t\t\tcase 'lineCount': {\n\t\t\t\tconst regex = /\\d+/g\n\t\t\t\tconst height = getStyle(textWrapper, 'height').match(regex)[0]\n\t\t\t\tconst lineHeight = getStyle(text, 'line-height').match(regex)[0]\n\t\t\t\treadValue = height / lineHeight\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn\n\t\t}\n\t\tinput.value = readValue\n\t}\n)","import { text, textWrapper } from '/src/logic/elements'\n\nconst SpeechRecognition =\n\twindow.SpeechRecognition ||\n\twindow.webkitSpeechRecognition ||\n\twindow.mozSpeechRecognition ||\n\twindow.msSpeechRecognition ||\n\twindow.oSpeechRecognition\n\nexport let recognition\n\nif (typeof SpeechRecognition === 'undefined') {\n\trecognition = {\n\t\terror:\n\t\t\t'This browser does not support speech recognition. Please open this app in Google Chrome.',\n\t}\n} else {\n\trecognition = new SpeechRecognition()\n}\n\n// Recognition config\nrecognition.continuous = true\n\nrecognition.interimResults = true\n\nrecognition.onresult = (e) => {\n\tconst resultArray = Array.from(e.results)\n\tconst string = resultArray.map((r) => r[0].transcript).join('')\n\ttext.textContent = string\n\ttextWrapper.scroll(0, textWrapper.scrollHeight)\n}\n\nrecognition.onend = () => {\n\t// Speech Recognition ends every few seconds of inactivity\n\t// but we want to keep it alive while the user is on the page\n\trecognition.start()\n}\n","import { recognition } from '/src/logic/speech'\nimport { text, pageSizeWarningText } from '/src/logic/elements'\n\nif (recognition.error) {\n\tconsole.warn(recognition.error)\n\ttext.textContent = recognition.error\n\tpageSizeWarningText.textContent = recognition.error\n} else {\n\trecognition.start()\n}\n"]}