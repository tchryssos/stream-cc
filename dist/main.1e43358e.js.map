{"version":3,"sources":["src/logic/elements.js","src/logic/speech.js","src/main.js"],"names":["text","document","getElementById","textWrapper","pageSizeWarningText","SpeechRecognition","window","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","recognition","error","continuous","interimResults","onresult","e","resultArray","Array","from","results","string","map","r","transcript","join","textContent","scroll","scrollHeight","onend","start","console","warn"],"mappings":";;AEAA;;AACA;;AFDO,AEGP,IFHaA,AEGTW,IFHa,GAAGV,QAAQ,CAACC,IEGbU,KAAhB,EAAuB,GFHH,CAAwB,MAAxB,CAAb;ACAP,ACICmB,EAAAA,OAAO,CAACC,IAAR,CAAarB,oBAAYC,KAAzB;AFHM,AEINZ,IFJYG,WAAW,EEIlBuB,CFJqBzB,QAAQ,CAACC,CEInC,GAAmBS,UFJO,CAAwB,SEInBC,IFJL,CAApB,AEIN;ADHD,ACICR,IDJKC,iBAAiB,GACtBC,MAAM,CAACD,CCGaqB,WAApB,GAAkCf,EDHlC,IACAL,MAAM,CAACC,OCEuCK,KAA9C,WDHA,IAEAN,MAAM,CAACE,oBAFP,IAGAF,MAAM,CAACG,mBAHP,IAIAH,MAAM,CAACI,kBALR;ADAO,ACOA,ACFN,CAJD,GFDaN,ACOFO,GCFJ,QDEA,QDPyB,GAAGV,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,CAA5B;AEMNS,sBAAYmB,KAAZ;AACA;ADED,IAAI,OAAOzB,iBAAP,KAA6B,WAAjC,EAA8C;AAC7C,wBAAAM,WAAW,GAAG;AACbC,IAAAA,KAAK,EACJ;AAFY,GAAd;AAIA,CALD,MAKO;AACN,wBAAAD,WAAW,GAAG,IAAIN,iBAAJ,EAAd;AACA,EAED;;;AACAM,WAAW,CAACE,UAAZ,GAAyB,IAAzB;AAEAF,WAAW,CAACG,cAAZ,GAA6B,IAA7B;;AAEAH,WAAW,CAACI,QAAZ,GAAuB,UAACC,CAAD,EAAO;AAC7B,MAAMC,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWH,CAAC,CAACI,OAAb,CAApB;AACA,MAAMC,MAAM,GAAGJ,WAAW,CAACK,GAAZ,CAAgB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAAC,CAAD,CAAD,CAAKC,UAAZ;AAAA,GAAhB,EAAwCC,IAAxC,CAA6C,EAA7C,CAAf;AACAzB,iBAAK0B,WAAL,GAAmBL,MAAnB;;AACAlB,wBAAYwB,MAAZ,CAAmB,CAAnB,EAAsBxB,sBAAYyB,YAAlC;AACA,CALD;;AAOAjB,WAAW,CAACkB,KAAZ,GAAoB,YAAM;AACzB;AACA;AACAlB,EAAAA,WAAW,CAACmB,KAAZ;AACA,CAJD","file":"main.1e43358e.js","sourceRoot":"..","sourcesContent":["export const text = document.getElementById('text')\nexport const textWrapper = document.getElementById('textWrapper')\nexport const pageSizeWarningText = document.getElementById('pageSizeWarningText')","import { text, textWrapper } from '/src/logic/elements'\n\nconst SpeechRecognition =\n\twindow.SpeechRecognition ||\n\twindow.webkitSpeechRecognition ||\n\twindow.mozSpeechRecognition ||\n\twindow.msSpeechRecognition ||\n\twindow.oSpeechRecognition\n\nexport let recognition\n\nif (typeof SpeechRecognition === 'undefined') {\n\trecognition = {\n\t\terror:\n\t\t\t'This browser does not support speech recognition. Please open this app in Google Chrome.',\n\t}\n} else {\n\trecognition = new SpeechRecognition()\n}\n\n// Recognition config\nrecognition.continuous = true\n\nrecognition.interimResults = true\n\nrecognition.onresult = (e) => {\n\tconst resultArray = Array.from(e.results)\n\tconst string = resultArray.map((r) => r[0].transcript).join('')\n\ttext.textContent = string\n\ttextWrapper.scroll(0, textWrapper.scrollHeight)\n}\n\nrecognition.onend = () => {\n\t// Speech Recognition ends every few seconds of inactivity\n\t// but we want to keep it alive while the user is on the page\n\trecognition.start()\n}\n","import { recognition } from '/src/logic/speech'\nimport { text, pageSizeWarningText } from '/src/logic/elements'\n\nif (recognition.error) {\n\tconsole.warn(recognition.error)\n\ttext.textContent = recognition.error\n\tpageSizeWarningText.textContent = recognition.error\n} else {\n\trecognition.start()\n}\n"]}