{"version":3,"sources":["src/logic/elements.js","src/logic/speech.js","src/main.js"],"names":["formInputs","Array","from","document","querySelectorAll","text","getElementById","textWrapper","textContainer","warningWrapper","warningText","settingsPannel","settingsButton","settingsIcon","settingsForm","xIcon","checkIcon","getStyle","element","styleProp","style","getComputedStyle","getNumericalValue","parseInt","match","addEventListener","display","opacity","forEach","input","name","readValue","onChange","e","v","target","value","color","i","body","backgroundColor","documentElement","Math","round","lineCount","nextLineHeight","nextHeight","fontSize","lineHeight","height","recognition","SpeechRecognition","window","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","autorestart","setErrorState","allowRestart","start","textContent","continuous","interimResults","onresult","resultArray","string","results","map","r","transcript","join","scroll","scrollHeight","onend","onerror","error","console","warn"],"mappings":"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","file":"main.60ccc8bd.js","sourceRoot":"..","sourcesContent":["// START - ELEMENTS - START\nconst formInputs = Array.from(document.querySelectorAll('.input'))\nexport const text = document.getElementById('text')\nexport const textWrapper = document.getElementById('textWrapper')\nexport const textContainer = document.getElementById('textContainer')\n\nexport const warningWrapper = document.getElementById('warningWrapper')\nexport const warningText = document.getElementById('warningText')\n\nexport const settingsPannel = document.getElementById('settingsPannel')\nexport const settingsButton = document.getElementById('settingsButton')\nexport const settingsIcon = document.getElementById('settingsIcon')\nexport const settingsForm = document.getElementById('settingsForm')\n\nexport const xIcon = document.getElementById('xIcon')\nexport const checkIcon = document.getElementById('checkIcon')\n// END - ELEMENTS - END\n\n// START - UTILS - START\nconst getStyle = (element, styleProp) =>\n\telement.style[styleProp] || getComputedStyle(element)[styleProp]\n\nconst getNumericalValue = (text) => {\n\tconst regex = /\\d+/g\n\treturn parseInt(text.match(regex)[0])\n}\n// END - UTILS - END\n\n// START - EVENT LISTENERS - START\nsettingsButton.addEventListener('click', () => {\n\tconst settingsDisplay = getStyle(settingsPannel, 'display')\n\n\tif (settingsDisplay === 'none') {\n\t\tsettingsPannel.style.display = 'block'\n\t\tsettingsIcon.style.opacity = 1\n\t} else {\n\t\tsettingsPannel.style.display = 'none'\n\t\tsettingsIcon.style.opacity = 0.7\n\t}\n})\n\nformInputs.forEach((input) => {\n\tconst { name } = input\n\tlet readValue\n\tlet onChange\n\tswitch (name) {\n\t\tcase 'textColor':\n\t\t\treadValue = getStyle(text, 'color')\n\n\t\t\tonChange = (e) => {\n\t\t\t\tconst v = e.target.value\n\t\t\t\ttext.style.color = v\n\t\t\t\tformInputs.forEach((i) => (i.style.color = v))\n\t\t\t\tsettingsPannel.style.color = v\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'backgroundColor':\n\t\t\treadValue = getStyle(document.body, 'background-color')\n\n\t\t\tonChange = (e) => {\n\t\t\t\tconst v = e.target.value\n\t\t\t\tdocument.body.style.backgroundColor = v\n\t\t\t\tdocument.documentElement.style.backgroundColor = v\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'fontSize':\n\t\t\treadValue = getNumericalValue(getStyle(text, 'font-size'))\n\n\t\t\tonChange = (e) => {\n\t\t\t\tconst v = Math.round(e.target.value)\n\n\t\t\t\tconst height = getNumericalValue(getStyle(textWrapper, 'height'))\n\t\t\t\tconst lineHeight = getNumericalValue(getStyle(text, 'line-height'))\n\t\t\t\tconst lineCount = height / lineHeight\n\n\t\t\t\tconst nextLineHeight = Math.round(v + 8)\n\t\t\t\tconst nextHeight = Math.round(nextLineHeight * lineCount)\n\n\t\t\t\tinput.value = v\n\t\t\t\ttext.style.fontSize = `${v}px`\n\t\t\t\ttext.style.lineHeight = `${nextLineHeight}px`\n\t\t\t\ttextWrapper.style.height = `${nextHeight}px`\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'lineCount': {\n\t\t\tconst height = getNumericalValue(getStyle(textWrapper, 'height'))\n\t\t\tconst lineHeight = getNumericalValue(getStyle(text, 'line-height'))\n\t\t\treadValue = height / lineHeight\n\n\t\t\tonChange = (e) => {\n\t\t\t\tconst v = Math.round(e.target.value)\n\t\t\t\tconst fontSize = getNumericalValue(getStyle(text, 'font-size'))\n\t\t\t\tconst lineHeight = Math.round(fontSize + 8)\n\t\t\t\tconst height = Math.round(lineHeight * v)\n\t\t\t\ttextWrapper.style.height = `${height}px`\n\t\t\t\ttext.style.lineHeight = `${lineHeight}px`\n\t\t\t\tinput.value = v\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tdefault:\n\t\t\treturn\n\t}\n\tinput.value = readValue\n\tinput.addEventListener('change', onChange)\n})\n// END - EVENT LISTENERS - END\n","import { warningText } from './elements'\nimport {\n\ttext,\n\ttextWrapper,\n\ttextContainer,\n\txIcon,\n\tcheckIcon,\n\twarningWrapper,\n\tsettingsButton,\n\tsettingsPannel,\n} from '/src/logic/elements'\n\n// START - SPEECH RECOG SETUP - START\nconst SpeechRecognition =\n\twindow.SpeechRecognition ||\n\twindow.webkitSpeechRecognition ||\n\twindow.mozSpeechRecognition ||\n\twindow.msSpeechRecognition ||\n\twindow.oSpeechRecognition\n\nexport let recognition\nlet autorestart = true\n\nconst setErrorState = (allowRestart) => {\n\tautorestart = !!allowRestart\n\txIcon.style.display = 'block'\n\tcheckIcon.style.display = 'none'\n\ttextContainer.style.display = 'none'\n\tsettingsButton.style.display = 'none'\n\twarningWrapper.style.display = 'block'\n\tsettingsPannel.style.display = 'none'\n}\n\nif (typeof SpeechRecognition === 'undefined') {\n\trecognition = { start: () => {} }\n\tsetErrorState()\n\twarningText.textContent =\n\t\t'This browser does not support the Speech Recognition API. Please switch to Google Chrome and try again.'\n} else {\n\trecognition = new SpeechRecognition()\n}\n// END - SPEECH RECOG SETUP- END\n\n// START - SPEECH RECOG CONIG - START\nrecognition.continuous = true\n\nrecognition.interimResults = true\n\nrecognition.onresult = (e) => {\n\tconst resultArray = Array.from(e.results)\n\tconst string = resultArray.map((r) => r[0].transcript).join('')\n\ttext.textContent = string\n\ttextWrapper.scroll(0, textWrapper.scrollHeight)\n}\n\nrecognition.onend = () => {\n\t// Speech Recognition ends every few seconds of inactivity\n\t// but we want to keep it alive while the user is on the page\n\tif (autorestart) {\n\t\trecognition.start()\n\t}\n}\n\nrecognition.onerror = (e) => {\n\tswitch (e.error) {\n\t\tcase 'no-speech':\n\t\t\tbreak\n\t\tcase 'not-allowed':\n\t\tcase 'service-not-allowed':\n\t\t\tsetErrorState()\n\t\t\twarningText.textContent =\n\t\t\t\t'Stream CC needs permission to access your microphone. Please enable microphone access and reload this page.'\n\t\t\tbreak\n\t\tcase 'network':\n\t\t\t// @TODO Networking error should lead to a reconnect once network connection is detected\n\t\t\tsetErrorState()\n\t\t\twarningText.textContent =\n\t\t\t\t'Stream CC cannot connect to the internet. Please check your connection and reload the page.'\n\t\t\tbreak\n\t\tdefault:\n\t\t\tconsole.warn(`${e.error}. You can report this error with reproduction steps to https://github.com/tchryssos/stream-cc/issues`)\n\t}\n}\n// END - SPEECH RECOG CONFIG - END\n","import { recognition } from '/src/logic/speech'\n\nrecognition.start()\n"]}